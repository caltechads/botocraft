---
primary:
  LoadBalancer:
    primary_key: LoadBalancerArn
    arn_key: LoadBalancerArn
    name_key: LoadBalancerName
    input_shapes:
      - CreateLoadBalancerInput
    fields:
      LoadBalancerName:
        required: true
      Scheme:
        default: >-
          "internet-facing"
      Type:
        default: >-
          "application"
      IpAddressType:
        default: >-
          "ipv4"
    manager_methods:
      attributes:
        docstring: >-
          Return the attributes of the load balancer.  These are stored separately
          from the load balancer object
        manager_method: attributes
        args:
          0:
            name: LoadBalancerArn
            value: >-
              cast(str, self.arn)
    relations:
      listeners:
        primary_model_name: Listener
        many: true
        docstring: >-
          Return the ARNs of :py:class:`Listener` objects that belong to this load
          balancer, if any.
        transformer:
          mapping:
            load_balancer: LoadBalancerArn
      vpc:
        primary_model_name: Vpc
        docstring: >-
          Return the :py:class:`Vpc` object that this load balancer belongs to, if
          any.
        transformer:
          mapping:
            VpcId: VpcId
      security_groups:
        primary_model_name: SecurityGroup
        many: true
        docstring: >-
          Return the ARNs of :py:class:`SecurityGroup` objects that belong to this
          load balancer, if any.
        transformer:
          mapping:
            GroupIds: SecurityGroups
    properties:
      logging_enabled:
        docstring: >-
          Return whether logging is enabled for the load balancer.
        transformer:
          code:
            code: >-
              self.attributes().get("access_logs.s3.enabled") == "true"
            return_type: bool
      logging_bucket:
        docstring: >-
          Return the name of the S3 bucket that logs are stored in, if any.
        transformer:
          code:
            code: >-
              self.attributes().get("access_logs.s3.bucket")
            return_type: str
      logging_prefix:
        docstring: >-
          Return the prefix in the S3 bucket that logs are stored in, if any.
        transformer:
          code:
            code: >-
              self.attributes().get("access_logs.s3.prefix")
            return_type: str

  Listener:
    primary_key: ListenerArn
    arn_key: ListenerArn
    fields:
      LoadBalancerArn:
        required: true
      Port:
        required: true
      Protocol:
        default: >-
          "HTTPS"
    relations:
      load_balancer:
        primary_model_name: LoadBalancer
        docstring: >-
          Return the :py:class:`LoadBalancer` object that this listener belongs to,
          if any.
        transformer:
          mapping:
            LoadBalancerArn: LoadBalancerArn
      rules:
        primary_model_name: Rule
        many: true
        docstring: >-
          Return the ARNs of :py:class:`Rule` objects that belong to this listener,
          if any.
        transformer:
          mapping:
            ListenerArn: ListenerArn
  Rule:
    primary_key: RuleArn
    arn_key: RuleArn
    input_shapes:
      - CreateRuleInput
      - ModifyRuleInput
    fields:
      Priority:
        default: >-
          "1"
      Conditions:
        required: true
      Actions:
        required: true
      IsDefault:
        default: >-
          False
  TargetGroup:
    primary_key: TargetGroupArn
    arn_key: TargetGroupArn
    name_key: TargetGroupName
    fields:
      TargetGroupName:
        required: true
      Protocol:
        default: >-
          "HTTPS"
      Port:
        required: true
      VpcId:
        required: true
      TargetType:
        default: >-
          "ip"
      IpAddressType:
        default: >-
          "ipv4"
    relations:
      load_balancers:
        primary_model_name: LoadBalancer
        many: true
        docstring: >-
          Return the ARNs of :py:class:`LoadBalancer` objects that this target group
          belongs to, if any.
        transformer:
          mapping:
            LoadBalancerArns: LoadBalancerArns
      vpc:
        primary_model_name: Vpc
        docstring: >-
          Return the :py:class:`Vpc` object that this target group belongs to, if
          any.
        transformer:
          mapping:
            VpcId: VpcId
    manager_methods:
      targets:
        docstring: >-
          Return the targets for the target group.
        manager_method: targets
        args:
          0:
            name: TargetGroupArn
            value: >-
              cast(str, self.arn)
secondary:
  SubnetMapping:
    fields:
      SubnetId:
        required: true
  Certificate:
    readonly: true
  TargetGroupStickinessConfig:
    alternate_name: ElbV2TargetGroupStickinessConfig
  Matcher:
    alternate_name: ResponseCodeMatcher
  TargetHealth:
    alternate_name: TargetHealthInfo
  AnomalyDetection:
    alternate_name: AnomalyDetectionInfo
  RuleCondition:
    fields:
      Field:
        rename: FieldName
  Action:
    fields:
      Type:
        rename: ActionType
  AdministrativeOverride:
    alternate_name: ElbV2AdministrativeOverride
  IpamPools:
    alternate_name: ElbV2IpamPools
