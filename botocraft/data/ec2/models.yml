---
primary:
  Vpc:
    primary_key: VpcId
    name_key: VpcId
    input_shapes:
      - CreateVpcRequest
    fields:
      CidrBlock:
        required: true
      Tags:
        readonly: false
  Subnet:
    primary_key: SubnetId
    arn_key: SubnetArn
    name_key: SubnetId
    input_shapes:
      - CreateSubnetRequest
    fields:
      VpcId:
        required: true
      AvailabilityZone:
        required: true
      CidrBlock:
        required: true
      Ipv6Native:
        default: "False"
      Tags:
        readonly: false
  SecurityGroup:
    primary_key: GroupId
    name_key: GroupName
    mixins:
      - name: SecurityGroupModelMixin
        import_path: botocraft.mixins.ec2
    input_shapes:
      - CreateSecurityGroupRequest
    fields:
      VpcId:
        required: true
      GroupName:
        required: true
      Description:
        required: true
      IpPermissions:
        readonly: false
      IpPermissionsEgress:
        readonly: false
      Tags:
        readonly: false
  NetworkAcl:
    primary_key: NetworkAclId
    name_key: NetworkAclId
    input_shapes:
      - CreateNetworkAclRequest
  Image:
    alternate_name: AMI
    primary_key: ImageId
    name_key: Name
    input_shapes:
      - CreateImageRequest
    fields:
      Architecture:
        readonly: true
      ImageId:
        readonly: true
      ImageType:
        readonly: true
      Public:
        readonly: true
      KernelId:
        readonly: true
      Platform:
        readonly: true
      PlatformDetails:
        readonly: true
      UsageOperation:
        readonly: true
      ProductCodes:
        readonly: true
      RamdiskId:
        readonly: true
      State:
        readonly: true
      EnaSupport:
        readonly: true
      ImageOwnerAlias:
        readonly: true
      RootDeviceName:
        readonly: true
      RootDeviceType:
        readonly: true
      SriovNetSupport:
        readonly: true
      VirtualizationType:
        readonly: true
      StateReason:
        readonly: true
      BootMode:
        readonly: true
      DeprecationTime:
        readonly: true
      ImdsSupport:
        readonly: true

  Instance:
    primary_key: InstanceId
    input_shapes:
      - RunInstancesRequest
    fields:
      Tags:
        readonly: false
    relations:
      vpc:
        primary_model_name: Vpc
        docstring: >-
          Return the :py:class:`Vpc` object that this instance belongs to, if any.
        transformer:
          mapping:
            VpcId: VpcId
      subnet:
        primary_model_name: Subnet
        docstring: >-
          Return the :py:class:`Subnet` object that this instance belongs to, if any.
        transformer:
          mapping:
            SubnetId: SubnetId
      security_groups:
        primary_model_name: SecurityGroup
        many: true
        docstring: >-
          Return the :py:class:`SecurityGroup` objects that this instance belongs to,
          if any.
        transformer:
          mapping:
            GroupIds: >-
              [identifier.GroupId for identifier in cast(List["GroupIdentifier"], self.SecurityGroups)]
    manager_methods:
      start:
        docstring: >-
          Start the instance.
        manager_method: start
        args:
          0:
            name: InstanceIds
            value: >-
              [self.InstanceId]
        user_keyword_args:
          - name: DryRun
            value: "False"
      stop:
        docstring: >-
          Stop the instance.
        manager_method: stop
        args:
          0:
            name: InstanceIds
            value: >-
              [self.InstanceId]
        user_keyword_args:
          - name: DryRun
            value: "False"
          - name: Hibernate
            value: "False"
          - name: Force
            value: "False"
      reboot:
        docstring: >-
          Reboot the instance.
        manager_method: reboot
        args:
          0:
            name: InstanceIds
            value: >-
              [self.InstanceId]
        user_keyword_args:
          - name: DryRun
            value: "False"
      terminate:
        docstring: >-
          Terminate the instance.
        manager_method: terminate
        args:
          0:
            name: InstanceIds
            value: >-
              [self.InstanceId]
        user_keyword_args:
          - name: DryRun
            value: "False"
  LaunchTemplate:
    primary_key: LaunchTemplateId
    name_key: LaunchTemplateName
    input_shapes:
      - CreateLaunchTemplateRequest
    fields:
      LaunchTemplateName:
        required: true
    relations:
      versions:
        primary_model_name: LaunchTemplateVersion
        many: true
        docstring: >-
          Return the :py:class:`LaunchTemplateVersion` objects that belong to
          this template, if any.
        transformer:
          mapping:
            LaunchTemplateId: LaunchTemplateId
      default_version:
        primary_model_name: LaunchTemplateVersion
        docstring: >-
          Return the :py:class:`LaunchTemplateVersion` object that is the default
          version of this template, if any.
        transformer:
          mapping:
            LaunchTemplateId: LaunchTemplateId
            Version: DefaultVersionNumber
      latest_version:
        primary_model_name: LaunchTemplateVersion
        docstring: >-
          Return the :py:class:`LaunchTemplateVersion` object that is the latest
          version of this template, if any.
        transformer:
          mapping:
            LaunchTemplateId: LaunchTemplateId
            Version: LatestVersionNumber
  LaunchTemplateVersion:
    name_key: LaunchTemplateName
    input_shapes:
      - CreateLaunchTemplateVersionRequest
    properties:
      pk:
        transformer:
          mapping:
            LaunchTemplateId: LaunchTemplateId
            Version: VersionNumber
    relations:
      launch_template:
        primary_model_name: LaunchTemplate
        docstring: >-
          Return the :py:class:`LaunchTemplate` object that this version belongs to, if
          any.
        transformer:
          mapping:
            LaunchTemplateId: LaunchTemplateId
  NetworkInterface:
    primary_key: NetworkInterfaceId
    input_shapes:
      - CreateNetworkInterfaceRequest
    fields:
      InterfaceType:
        python_type: Optional[str]
    relations:
      subnet:
        primary_model_name: Subnet
        docstring: >-
          Return the :py:class:`Subnet` object that this network interface belongs to,
          if any.
        transformer:
          mapping:
            SubnetId: SubnetId
      security_groups:
        primary_model_name: SecurityGroup
        many: true
        docstring: >-
          Return the :py:class:`SecurityGroup` objects that this network interface
          belongs to, if any.
        transformer:
          mapping:
            GroupIds: >-
              [identifier.GroupId for identifier in cast(List["GroupIdentifier"], self.Groups)]
    manager_methods:
      reset:
        docstring: >-
          Reset the network interface.
        manager_method: reset
        args:
          0:
            name: NetworkInterfaceId
            value: >-
              self.NetworkInterfaceId
        user_keyword_args:
          - name: DryRun
            value: "False"
          - name: SourceDestCheck
            value: "True"
      attach:
        docstring: >-
          Attach the network interface.
        manager_method: attach
        args:
          0:
            name: NetworkInterfaceId
            value: >-
              self.NetworkInterfaceId
        user_args:
          1:
            name: InstanceId
            attr_type: str
          2:
            name: DeviceIndex
            attr_type: int
        user_keyword_args:
          - name: NetworkCardIndex
            value: "None"
          - name: EnaSrdSpecification
            value: "None"
          - name: DryRun
            value: "False"
      detach:
        docstring: >-
          Detach the network interface.
        manager_method: detach
        args:
          0:
            name: AttachmentId
            value: >-
              self.Attachment.AttachmentId
        user_keyword_args:
          - name: Force
            value: "False"
          - name: DryRun
            value: "False"
  InstanceTypeInfo:
    alternate_name: EC2InstanceType
    primary_key: InstanceType
    name_key: InstanceType
    readonly: true
    relations:
      instances:
        primary_model_name: Instance
        many: true
        docstring: >-
          Return the :py:class:`Instance` objects that have this instance type, if any.
        transformer:
          mapping:
            Filters: >-
              [{"Name": "instance-type", "Values": [self.InstanceType]}]
secondary:
  Monitoring:
    alternate_name: EC2DetailedMonitoring
  PrivateDnsNameOptionsOnLaunch:
    alternate_name: EC2PrivateDnsNameOptionsOnLaunch
  StateReason:
    alternate_name: EC2StateReason
  BlockDeviceMapping:
    alternate_name: EC2BlockDeviceMapping
  LaunchTemplateSpecification:
    alternate_name: EC2LaunchTemplateSpecification
  HibernationOptions:
    alternate_name: EC2HibernationOptions
  CpuOptions:
    alternate_name: EC2CpuOptions
  Placement:
    alternate_name: EC2Placement
  EnclaveOptions:
    alternate_name: EC2EnclaveOptions
  IamInstanceProfile:
    alternate_name: EC2IamInstanceProfile
  IcmpTypeCode:
    alternate_name: EC2IcmpTypeCode
  PortRange:
    alternate_name: NetworkAclPortRange
  CreditSpecification:
    alternate_name: InstanceCreditSpecification
  MemoryMiB:
    alternate_name: InstanceMemoryMiB
  MemoryGiBPerVCpu:
    alternate_name: InstanceMemoryGiBPerVCpu
  NetworkInterfaceCount:
    alternate_name: InstanceNetworkInterfaceCount
  TotalLocalStorageGB:
    alternate_name: InstanceTotalLocalStorageGB
  BaselineEbsBandwidthMbps:
    alternate_name: InstanceBaselineEbsBandwidthMbps
  AcceleratorCount:
    alternate_name: InstanceAcceleratorCount
  AcceleratorTotalMemoryMiB:
    alternate_name: InstanceAcceleratorTotalMemoryMiB
  NetworkBandwidthGbps:
    alternate_name: InstanceNetworkBandwidthGbps
  InstanceRequirements:
    alternate_name: LaunchTemplateInstanceRequirements
  CreateNetworkAclResult:
    fields:
      NetworkAcl:
        rename: NetworkAclInstance
  CapacityReservationTarget:
    alternate_name: EC2CapacityReservationTarget
  CreateLaunchTemplateResult:
    fields:
      LaunchTemplate:
        rename: LaunchTemplateInstance
  DeleteLaunchTemplateResult:
    fields:
      LaunchTemplate:
        rename: LaunchTemplateInstance
  CreateLaunchTemplateVersionResult:
    fields:
      LaunchTemplateVersion:
        rename: LaunchTemplateVersionInstance
  ResponseError:
    alternate_name: EC2ResponseError
  MemoryGiBPerVCpuRequest:
    alternate_name: EC2MemoryGiBPerVCpuRequest
  NetworkBandwidthGbpsRequest:
    alternate_name: EC2NetworkBandwidthGbpsRequest
  ConnectionTrackingSpecification:
    alternate_name: EC2ConnectionTrackingSpecification
  ConnectionTrackingConfiguration:
    alternate_name: EC2ConnectionTrackingConfiguration
  EnaSrdUdpSpecification:
    alternate_name: EC2EnaSrdUdpSpecification
  CreateNetworkInterfaceResult:
    fields:
      NetworkInterface:
        rename: NetworkInterfaceInstance
  ProcessorInfo:
    alternate_name: EC2ProcessorInfo
  VCpuInfo:
    alternate_name: EC2VCpuInfo
  MemoryInfo:
    alternate_name: EC2MemoryInfo
  InstanceStorageInfo:
    alternate_name: EC2InstanceStorageInfo
  EbsOptimizedInfo:
    alternate_name: EC2EbsOptimizedInfo
  EbsInfo:
    alternate_name: EC2EbsInfo
  EfaInfo:
    alternate_name: EC2EfaInfo
  NetworkInfo:
    alternate_name: EC2NetworkInfo
  GpuInfo:
    alternate_name: EC2GpuInfo
  FpgaInfo:
    alternate_name: EC2FpgaInfo
  PlacementGroupInfo:
    alternate_name: EC2PlacementGroupInfo
  InferenceAcceleratorInfo:
    alternate_name: EC2InferenceAcceleratorInfo
  NitroTpmInfo:
    alternate_name: EC2NitroTpmInfo
  MediaAcceleratorInfo:
    alternate_name: EC2MediaAcceleratorInfo
  NeuronInfo:
    alternate_name: EC2NeuronInfo
