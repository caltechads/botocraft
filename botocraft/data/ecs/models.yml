---
primary:
  Service:
    arn_key: serviceArn
    name_key: serviceName
    input_shapes:
      - CreateServiceRequest
      - UpdateServiceRequest
    mixins:
      - name: ECSServiceModelMixin
        import_path: botocraft.mixins.ecs
    fields:
      serviceName:
        required: true
      taskDefinition:
        required: true
      clusterArn:
        required: true
      desiredCount:
        required: true
        default: 1
      launchType:
        required: true
        default: >-
          "FARGATE"
      schedulingStrategy:
        required: true
        default: >-
          "REPLICA"
      tags:
        rename: Tags
    properties:
      pk:
        docstring: >-
          The primary key of the service.  This can be used to get the service
          with the :py:meth:`botocraft.services.ecs.ServiceManager.get` method,
          or to do
          :py:meth:`botocraft.services.ecs.ServiceManager.partial_update`.
        transformer:
          mapping:
            service: serviceName
            cluster: clusterArn
      cluster_name:
        docstring: >-
          The name of the cluster that houses this service.
        transformer:
          regex:
            attribute: clusterArn
            regex: >-
              ^.*:cluster/(.+)$
            cluster: clusterArn
    relations:
      cluster:
        primary_model_name: Cluster
        docstring: >-
          Return the :py:class:`Cluster` object that this service belongs to, if
          any.
        transformer:
          mapping:
            cluster: clusterArn
      task_definition:
        primary_model_name: TaskDefinition
        docstring: >-
          Return the :py:class:`TaskDefinition` object that this service uses, if
          any.
        transformer:
          mapping:
            taskDefinition: taskDefinition
      tasks:
        primary_model_name: Task
        cached: false
        many: true
        docstring: >-
          Return the ARNs of :py:class:`Task` objects that run in this service, if
          any.
        transformer:
          mapping:
            serviceName: serviceName
            cluster: clusterArn
      target_groups:
        primary_model_name: TargetGroup
        many: true
        docstring: >-
          Return the target groups that are associated with this service, if any.
        transformer:
          mapping:
            TargetGroupArns: >-
              [lb.targetGroupArn for lb in self.loadBalancers if lb.targetGroupArn]
  Cluster:
    primary_key: clusterArn
    arn_key: clusterArn
    name_key: clusterName
    input_shapes:
      - CreateClusterRequest
    fields:
      clusterName:
        required: true
        default: >-
          "default"
      tags:
        rename: Tags
    relations:
      services:
        primary_model_name: Service
        many: true
        docstring: >-
          Return the ARNs of :py:class:`Service` objects that run in this cluster, if
          any.
        transformer:
          mapping:
            cluster: clusterArn
      container_instances:
        primary_model_name: ContainerInstance
        many: true
        docstring: >-
          Return the ARNs of :py:class:`ContainerInstance` objects that run in this
          cluster, if any.
        transformer:
          mapping:
            cluster: clusterArn
  TaskDefinition:
    primary_key: taskDefinitionArn
    arn_key: taskDefinitionArn
    input_shapes:
      - RegisterTaskDefinitionRequest
    mixins:
      - name: TaskDefinitionModelMixin
        import_path: botocraft.mixins.ecs
    fields:
      family:
        required: true
      containerDefinitions:
        required: true
      networkMode:
        default: >-
          "awsvpc"
    extra_fields:
      Tags:
        python_type: List["ECSTag"]
        required: false
        docstring: >-
          The tags for the task definition.
  Task:
    primary_key: taskArn
    arn_key: taskArn
    input_shapes:
      - RunTaskRequest
    fields:
      tags:
        rename: Tags
      clusterArn:
        required: true
        readonly: false
      platformVersion:
        default: >-
          "LATEST"
      launchType:
        default: >-
          "FARGATE"
    extra_fields:
      taskDefinition:
        python_type: str
        docstring: >-
          The `family` and `revision` (`family:revision`) or full ARN of the
          task definition to run. If a `revision` isn't specified, the latest
          `ACTIVE` revision is used.
    properties:
      serviceName:
        docstring: >-
          The name of the service that ran this task, if any.
        transformer:
          regex:
            attribute: group
            regex: >-
              ^service:(.+)$
    relations:
      cluster:
        primary_model_name: Cluster
        docstring: >-
          Return the :py:class:`Cluster` object that this task belongs to, if any.
        transformer:
          mapping:
            cluster: clusterArn
      task_definition:
        primary_model_name: TaskDefinition
        docstring: >-
          Return the :py:class:`TaskDefinition` object that this task uses, if any.
        transformer:
          mapping:
            taskDefinition: taskDefinition
      container_instance:
        primary_model_name: ContainerInstance
        docstring: >-
          Return the :py:class:`ContainerInstance` object that runs this task, if any.
        transformer:
          mapping:
            containerInstance: containerInstanceArn
            cluster: clusterArn
      service:
        primary_model_name: Service
        docstring: >-
          Return the :py:class:`Service` object that runs this task, if any.
        transformer:
          mapping:
            service: serviceName
            cluster: clusterArn
  ContainerInstance:
    primary_key: containerInstanceArn
    arn_key: containerInstanceArn
    mixins:
      - name: ECSContainerInstanceModelMixin
        import_path: botocraft.mixins.ecs
    readonly: true
    fields:
      tags:
        rename: Tags
    properties:
      clusterName:
        docstring: >-
          The name of the cluster that houses this task, if any.
        transformer:
          regex:
            attribute: containerInstanceArn
            regex: >-
              :container-instance/(.+)/[0-9a-f]+$
      name:
        docstring: >-
          The name of the cluster that houses this task, if any.
        transformer:
          regex:
            attribute: containerInstanceArn
            regex: >-
              :container-instance/.+/([0-9a-f]+)$
    relations:
      instance:
        primary_model_name: Instance
        docstring: >-
          Return the :py:class:`Instance` object that this container instance
          represents, if any.
        transformer:
          mapping:
            InstanceId: ec2InstanceId
      tasks:
        primary_model_name: Task
        many: true
        cached: false
        docstring: >-
          Return the ARNs of :py:class:`Task` objects that run on this container
          instance, if any.
        transformer:
          mapping:
            cluster: clusterName
            containerInstance: containerInstanceArn
            desiredStatus: >-
              "RUNNING"
secondary:
  Deployment:
    readonly: true
  ContainerDefinition:
    fields:
      name:
        required: true
      image:
        required: true
      essential:
        required: true
        default: >-
          True
    properties:
      repository_name:
        docstring: >-
          The name of the repository that houses the image that this container
          definition uses.
        transformer:
          regex:
            attribute: image
            regex: >-
              ^(.+):.+$
  LoadBalancer:
    alternate_name: LoadBalancerConfiguration
  Tag:
    alternate_name: ECSTag
  TaskSet:
    fields:
      tags:
        rename: Tags
  RegisterTaskDefinitionResponse:
    fields:
      tags:
        rename: Tags
  DescribeTaskDefinitionResponse:
    fields:
      tags:
        rename: Tags
  EBSTagSpecification:
    fields:
      tags:
        rename: Tags
  Resource:
    alternate_name: ContainerInstanceResource