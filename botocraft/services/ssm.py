# This file is automatically generated by botocraft.  Do not edit directly.
from pydantic import Field
from datetime import datetime
from typing import Optional, Literal, Dict, List, cast
from .abstract import Boto3Model, ReadonlyBoto3Model
from .tagging import Tag
import boto3


# ==============
# Service Models
# ==============


class Parameter(Boto3Model):
    """
    An Amazon Web Services Systems Manager parameter in Parameter Store.
    """

    #: The name of the parameter.
    Name: str
    #: The type of parameter. Valid values include the following: ``String``,
    #: ``StringList``, and ``SecureString``.
    Type: Literal["String", "StringList", "SecureString"]
    #: The parameter value.
    Value: Optional[str]
    #: The parameter version.
    Version: Optional[int] = Field(frozen=True)
    #: Either the version number or the label used to retrieve the parameter value.
    #: Specify selectors by using one of the following formats:
    Selector: Optional[str] = None
    #: Applies to parameters that reference information in other Amazon Web Services
    #: services. ``SourceResult`` is the raw result or response from the source.
    SourceResult: Optional[str] = None
    #: Date the parameter was last changed or updated and the parameter version was
    #: created.
    LastModifiedDate: Optional[datetime] = Field(frozen=True)
    #: The Amazon Resource Name (ARN) of the parameter.
    ARN: Optional[str] = Field(frozen=True)
    #: The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The
    #: default is ``text``.
    DataType: Optional[str] = None


class ParameterStringFilter(Boto3Model):
    """
    One or more filters.

    Use a filter to return a more specific list of results.
    """

    #: The name of the filter.
    Key: str
    #: For all filters used with DescribeParameters, valid options include ``Equals``
    #: and ``BeginsWith``. The ``Name`` filter additionally supports the ``Contains``
    #: option. (Exception: For filters using the key ``Path``, valid options include
    #: ``Recursive`` and ``OneLevel``.)
    Option: Optional[str] = None
    #: The value you want to search for.
    Values: Optional[List[str]] = None


class ParametersFilter(Boto3Model):
    """
    This data type is deprecated.

    Instead, use ParameterStringFilter.
    """

    #: The name of the filter.
    Key: Literal["Name", "Type", "KeyId"]
    #: The filter values.
    Values: List[str]


# =======================
# Request/Response Models
# =======================


class DeleteParameterResult(Boto3Model):
    pass


class DescribeParametersResult(Boto3Model):
    #: Parameters returned by the request.
    Parameters: Optional[List["ParameterMetadata"]] = None
    #: The token to use when requesting the next set of items.
    NextToken: Optional[str] = None


class GetParametersResult(Boto3Model):
    #: A list of details for a parameter.
    Parameters: Optional[List["Parameter"]] = None
    #: A list of parameters that aren't formatted correctly or don't run during an
    #: execution.
    InvalidParameters: Optional[List[str]] = None


class ParameterInlinePolicy(Boto3Model):
    """
    One or more policies assigned to a parameter.
    """

    #: The JSON text of the policy.
    PolicyText: Optional[str] = None
    #: The type of policy. Parameter Store, a capability of Amazon Web Services
    #: Systems Manager, supports the following policy types: Expiration,
    #: ExpirationNotification, and NoChangeNotification.
    PolicyType: Optional[str] = None
    #: The status of the policy. Policies report the following statuses: Pending (the
    #: policy hasn't been enforced or applied yet), Finished (the policy was applied),
    #: Failed (the policy wasn't applied), or InProgress (the policy is being applied
    #: now).
    PolicyStatus: Optional[str] = None


class ParameterMetadata(Boto3Model):
    """
    Metadata includes information like the ARN of the last user and the
    date/time the parameter was last used.
    """

    #: The parameter name.
    Name: Optional[str] = None
    #: The type of parameter. Valid parameter types include the following: ``String``,
    #: ``StringList``, and ``SecureString``.
    Type: Optional[Literal["String", "StringList", "SecureString"]] = None
    #: The ID of the query key used for this parameter.
    KeyId: Optional[str] = None
    #: Date the parameter was last changed or updated.
    LastModifiedDate: Optional[datetime] = None
    #: Amazon Resource Name (ARN) of the Amazon Web Services user who last changed the
    #: parameter.
    LastModifiedUser: Optional[str] = None
    #: Description of the parameter actions.
    Description: Optional[str] = None
    #: A parameter name can include only the following letters and symbols.
    AllowedPattern: Optional[str] = None
    #: The parameter version.
    Version: Optional[int] = None
    #: The parameter tier.
    Tier: Optional[Literal["Standard", "Advanced", "Intelligent-Tiering"]] = None
    #: A list of policies associated with a parameter.
    Policies: Optional[List["ParameterInlinePolicy"]] = None
    #: The data type of the parameter, such as ``text`` or ``aws:ec2:image``. The
    #: default is ``text``.
    DataType: Optional[str] = None


class PutParameterResult(Boto3Model):
    #: The new version number of a parameter. If you edit a parameter value, Parameter
    #: Store automatically creates a new version and assigns this new version a unique
    #: ID. You can reference a parameter version ID in API operations or in Systems
    #: Manager documents (SSM documents). By default, if you don't specify a specific
    #: version, the system returns the latest parameter value when a parameter is
    #: called.
    Version: Optional[int] = None
    #: The tier assigned to the parameter.
    Tier: Optional[Literal["Standard", "Advanced", "Intelligent-Tiering"]] = None


# ===============
# Managers
# ===============


class ParameterManager:
    service_name: str = "ssm"

    def __init__(self) -> None:
        #: The boto3 client for the AWS service
        self.client = boto3.client(self.service_name)  # type: ignore

    def create(
        self,
        model: Parameter,
        Description: Optional[str] = None,
        AllowedPattern: Optional[str] = None,
        Tags: Optional[List[Tag]] = None,
        Tier: Optional[Literal["Standard", "Advanced", "Intelligent-Tiering"]] = None,
        Policies: Optional[str] = None,
        KeyId: Optional[str] = None,
    ) -> int:
        data = model.model_dump()
        _response = self.client.put_parameter(
            Name=data["Name"],
            Value=data["Value"],
            Description=Description,
            Type=data["Type"],
            KeyId=KeyId,
            Overwrite=data["Overwrite"],
            AllowedPattern=AllowedPattern,
            Tags=Tags,
            Tier=Tier,
            Policies=Policies,
            DataType=data["DataType"],
        )
        response = PutParameterResult.model_construct(**_response)
        return cast(int, response.Version)

    def update(self, model: Parameter) -> int:
        data = model.model_dump()
        _response = self.client.put_parameter(
            Name=data["Name"],
            Value=data["Value"],
            Description=data["Description"],
            Type=data["Type"],
            KeyId=data["KeyId"],
            Overwrite=data["Overwrite"],
            AllowedPattern=data["AllowedPattern"],
            Tags=data["Tags"],
            Tier=data["Tier"],
            Policies=data["Policies"],
            DataType=data["DataType"],
        )
        response = PutParameterResult.model_construct(**_response)
        return cast(int, response.Version)

    def get(
        self, Names: List[str], *, WithDecryption: Optional[bool] = None
    ) -> Optional[Parameter]:
        _response = self.client.get_parameters(
            Names=Names, WithDecryption=WithDecryption
        )
        response = GetParametersResult.model_construct(**_response)
        if response.Parameters:
            return response.Parameters[0]  # type: ignore # pylint: disable=unsubscriptable-object
        return None

    def list(
        self,
        *,
        Filters: Optional[List[ParametersFilter]] = None,
        ParameterFilters: Optional[List[ParameterStringFilter]] = None,
        MaxResults: Optional[int] = None,
        NextToken: Optional[str] = None
    ) -> List[ParameterMetadata]:
        _response = self.client.describe_parameters(
            Filters=Filters,
            ParameterFilters=ParameterFilters,
            MaxResults=MaxResults,
            NextToken=NextToken,
        )
        response = DescribeParametersResult.model_construct(**_response)
        return response.Parameters

    def delete(self, Name: str) -> None:
        self.client.delete_parameter(Name=Name)
