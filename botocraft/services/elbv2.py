# This file is automatically generated by botocraft.  Do not edit directly.
# pylint: disable=anomalous-backslash-in-string,unsubscriptable-object,line-too-long,arguments-differ,arguments-renamed
# mypy: disable-error-code="index, override"
from datetime import datetime
from typing import Dict, List, Literal, Optional, cast

from pydantic import Field

from botocraft.services.tagging import Tag

from .abstract import (Boto3Model, Boto3ModelManager, PrimaryBoto3Model,
                       ReadonlyBoto3Model, ReadonlyBoto3ModelManager,
                       ReadonlyPrimaryBoto3Model)

# ===============
# Managers
# ===============


class LoadBalancerManager(Boto3ModelManager):
    service_name: str = "elbv2"

    def create(
        self,
        model: "LoadBalancer",
        SubnetMappings: Optional[List["SubnetMapping"]] = None,
        Tags: Optional[List["Tag"]] = None,
    ) -> "LoadBalancer":
        """
        Creates an Application Load Balancer, Network Load Balancer, or Gateway
        Load Balancer.

        Args:
            model: The :py:class:``LoadBalancer`` to create.

        Keyword Args:
            SubnetMappings: The IDs of the public subnets. You can specify only one
                subnet per Availability Zone. You must specify either subnets or subnet
                mappings, but not both.
            Tags: The tags to assign to the load balancer.
        """
        data = model.model_dump()
        _response = self.client.create_load_balancer(
            Name=data["LoadBalancerName"],
            Subnets=data["Subnets"],
            SubnetMappings=self.serialize(SubnetMappings),
            SecurityGroups=data["SecurityGroups"],
            Scheme=data["Scheme"],
            Tags=self.serialize(Tags),
            Type=data["Type"],
            IpAddressType=data["IpAddressType"],
            CustomerOwnedIpv4Pool=data["CustomerOwnedIpv4Pool"],
        )
        response = CreateLoadBalancerOutput.model_construct(**_response)
        return cast("LoadBalancer", response.LoadBalancers[0])

    def delete(self, LoadBalancerArn: str) -> None:
        """
        Deletes the specified Application Load Balancer, Network Load Balancer,
        or Gateway Load Balancer. Deleting a load balancer also deletes its
        listeners.

        Args:
            LoadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
        """
        self.client.delete_load_balancer(
            LoadBalancerArn=self.serialize(LoadBalancerArn)
        )

    def get(
        self,
        *,
        LoadBalancerArns: Optional[List["str"]] = None,
        Names: Optional[List["str"]] = None,
        Marker: Optional[str] = None,
        PageSize: Optional[int] = None
    ) -> Optional["LoadBalancer"]:
        """
        Describes the specified load balancers or all of your load balancers.

        Keyword Args:
            LoadBalancerArns: The Amazon Resource Names (ARN) of the load balancers.
                You can specify up to 20 load balancers in a single call.
            Names: The names of the load balancers.
            Marker: The marker for the next set of results. (You received this marker
                from a previous call.)
            PageSize: The maximum number of results to return with this call.
        """
        _response = self.client.describe_load_balancers(
            LoadBalancerArns=self.serialize(LoadBalancerArns),
            Names=self.serialize(Names),
            Marker=self.serialize(Marker),
            PageSize=self.serialize(PageSize),
        )
        response = DescribeLoadBalancersOutput.model_construct(**_response)

        if response.LoadBalancers[0]:
            return response.LoadBalancers[0]
        return None

    def list(
        self,
        *,
        LoadBalancerArns: Optional[List["str"]] = None,
        Names: Optional[List["str"]] = None,
        Marker: Optional[str] = None,
        PageSize: Optional[int] = None
    ) -> List["LoadBalancer"]:
        """
        Describes the specified load balancers or all of your load balancers.

        Keyword Args:
            LoadBalancerArns: The Amazon Resource Names (ARN) of the load balancers.
                You can specify up to 20 load balancers in a single call.
            Names: The names of the load balancers.
            Marker: The marker for the next set of results. (You received this marker
                from a previous call.)
            PageSize: The maximum number of results to return with this call.
        """
        paginator = self.client.get_paginator("describe_load_balancers")
        response_iterator = paginator.paginate(
            LoadBalancerArns=self.serialize(LoadBalancerArns),
            Names=self.serialize(Names),
            Marker=self.serialize(Marker),
            PageSize=self.serialize(PageSize),
        )
        results: List["LoadBalancer"] = []
        for _response in response_iterator:
            response = DescribeLoadBalancersOutput(**_response)
            if response.LoadBalancers:
                results.extend(response.LoadBalancers)
            else:
                break
        return results


class ListenerManager(Boto3ModelManager):
    service_name: str = "elbv2"

    def create(
        self, model: "Listener", Tags: Optional[List["Tag"]] = None
    ) -> "Listener":
        """
        Creates a listener for the specified Application Load Balancer, Network
        Load Balancer, or Gateway Load Balancer.

        Args:
            model: The :py:class:``Listener`` to create.

        Keyword Args:
            Tags: The tags to assign to the listener.
        """
        data = model.model_dump()
        _response = self.client.create_listener(
            LoadBalancerArn=data["LoadBalancerArn"],
            DefaultActions=data["DefaultActions"],
            Protocol=data["Protocol"],
            Port=data["Port"],
            SslPolicy=data["SslPolicy"],
            Certificates=data["Certificates"],
            AlpnPolicy=data["AlpnPolicy"],
            Tags=self.serialize(Tags),
        )
        response = CreateListenerOutput.model_construct(**_response)
        return cast("Listener", response.Listeners[0])

    def update(self, model: "Listener") -> "Listener":
        """
        Replaces the specified properties of the specified listener. Any
        properties that you do not specify remain unchanged.

        Args:
            model: The :py:class:``Listener`` to update.
        """
        data = model.model_dump()
        _response = self.client.modify_listener(
            ListenerArn=data["ListenerArn"],
            Port=data["Port"],
            Protocol=data["Protocol"],
            SslPolicy=data["SslPolicy"],
            Certificates=data["Certificates"],
            DefaultActions=data["DefaultActions"],
            AlpnPolicy=data["AlpnPolicy"],
        )
        response = ModifyListenerOutput.model_construct(**_response)
        return cast("Listener", response.Listeners[0])

    def delete(self, ListenerArn: str) -> None:
        """
        Deletes the specified listener.

        Args:
            ListenerArn: The Amazon Resource Name (ARN) of the listener.
        """
        self.client.delete_listener(ListenerArn=self.serialize(ListenerArn))

    def get(
        self,
        ListenerArns: List["str"],
        *,
        Marker: Optional[str] = None,
        PageSize: Optional[int] = None
    ) -> Optional["Listener"]:
        """
        Describes the specified listeners or the listeners for the specified
        Application Load Balancer, Network Load Balancer, or Gateway Load
        Balancer. You must specify either a load balancer or one or more
        listeners.

        Args:
            ListenerArns: The Amazon Resource Names (ARN) of the listeners.

        Keyword Args:
            Marker: The marker for the next set of results. (You received this marker
                from a previous call.)
            PageSize: The maximum number of results to return with this call.
        """
        _response = self.client.describe_listeners(
            ListenerArns=self.serialize(ListenerArns),
            Marker=self.serialize(Marker),
            PageSize=self.serialize(PageSize),
        )
        response = DescribeListenersOutput.model_construct(**_response)

        if response.Listeners[0]:
            return response.Listeners[0]
        return None

    def list(
        self,
        *,
        LoadBalancerArn: Optional[str] = None,
        ListenerArns: Optional[List["str"]] = None,
        Marker: Optional[str] = None,
        PageSize: Optional[int] = None
    ) -> List["Listener"]:
        """
        Describes the specified listeners or the listeners for the specified
        Application Load Balancer, Network Load Balancer, or Gateway Load
        Balancer. You must specify either a load balancer or one or more
        listeners.

        Keyword Args:
            LoadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
            ListenerArns: The Amazon Resource Names (ARN) of the listeners.
            Marker: The marker for the next set of results. (You received this marker
                from a previous call.)
            PageSize: The maximum number of results to return with this call.
        """
        paginator = self.client.get_paginator("describe_listeners")
        response_iterator = paginator.paginate(
            LoadBalancerArn=self.serialize(LoadBalancerArn),
            ListenerArns=self.serialize(ListenerArns),
            Marker=self.serialize(Marker),
            PageSize=self.serialize(PageSize),
        )
        results: List["Listener"] = []
        for _response in response_iterator:
            response = DescribeListenersOutput(**_response)
            if response.Listeners:
                results.extend(response.Listeners)
            else:
                break
        return results


class RuleManager(Boto3ModelManager):
    service_name: str = "elbv2"

    def create(self, model: "Rule", Tags: Optional[List["Tag"]] = None) -> "Rule":
        """
        Creates a rule for the specified listener. The listener must be
        associated with an Application Load Balancer.

        Args:
            model: The :py:class:``Rule`` to create.

        Keyword Args:
            Tags: The tags to assign to the rule.
        """
        data = model.model_dump()
        _response = self.client.create_rule(
            ListenerArn=data["ListenerArn"],
            Conditions=data["Conditions"],
            Priority=data["Priority"],
            Actions=data["Actions"],
            Tags=self.serialize(Tags),
        )
        response = CreateRuleOutput.model_construct(**_response)
        return cast("Rule", response.Rules[0])

    def update(self, model: "Rule") -> "Rule":
        """
        Replaces the specified properties of the specified rule. Any properties
        that you do not specify are unchanged.

        Args:
            model: The :py:class:``Rule`` to update.
        """
        data = model.model_dump()
        _response = self.client.modify_rule(
            RuleArn=data["RuleArn"],
            Conditions=data["Conditions"],
            Actions=data["Actions"],
        )
        response = ModifyRuleOutput.model_construct(**_response)
        return cast("Rule", response.Rules[0])

    def delete(self, RuleArn: str) -> None:
        """
        Deletes the specified rule.

        Args:
            RuleArn: The Amazon Resource Name (ARN) of the rule.
        """
        self.client.delete_rule(RuleArn=self.serialize(RuleArn))

    def get(
        self,
        RuleArns: List["str"],
        *,
        Marker: Optional[str] = None,
        PageSize: Optional[int] = None
    ) -> Optional["Rule"]:
        """
        Describes the specified rules or the rules for the specified listener.
        You must specify either a listener or one or more rules.

        Args:
            RuleArns: The Amazon Resource Names (ARN) of the rules.

        Keyword Args:
            Marker: The marker for the next set of results. (You received this marker
                from a previous call.)
            PageSize: The maximum number of results to return with this call.
        """
        _response = self.client.describe_rules(
            RuleArns=self.serialize(RuleArns),
            Marker=self.serialize(Marker),
            PageSize=self.serialize(PageSize),
        )
        response = DescribeRulesOutput.model_construct(**_response)

        if response.Rules[0]:
            return response.Rules[0]
        return None

    def list(
        self,
        *,
        ListenerArn: Optional[str] = None,
        RuleArns: Optional[List["str"]] = None,
        Marker: Optional[str] = None,
        PageSize: Optional[int] = None
    ) -> List["Rule"]:
        """
        Describes the specified rules or the rules for the specified listener.
        You must specify either a listener or one or more rules.

        Keyword Args:
            ListenerArn: The Amazon Resource Name (ARN) of the listener.
            RuleArns: The Amazon Resource Names (ARN) of the rules.
            Marker: The marker for the next set of results. (You received this marker
                from a previous call.)
            PageSize: The maximum number of results to return with this call.
        """
        paginator = self.client.get_paginator("describe_rules")
        response_iterator = paginator.paginate(
            ListenerArn=self.serialize(ListenerArn),
            RuleArns=self.serialize(RuleArns),
            Marker=self.serialize(Marker),
            PageSize=self.serialize(PageSize),
        )
        results: List["Rule"] = []
        for _response in response_iterator:
            response = DescribeRulesOutput(**_response)
            if response.Rules:
                results.extend(response.Rules)
            else:
                break
        return results


class TargetGroupManager(Boto3ModelManager):
    service_name: str = "elbv2"

    def create(self, model: "TargetGroup") -> "TargetGroup":
        """
        Creates a target group.

        Args:
            model: The :py:class:``TargetGroup`` to create.
        """
        data = model.model_dump()
        _response = self.client.create_target_group(
            Name=data["Name"],
            Protocol=data["Protocol"],
            ProtocolVersion=data["ProtocolVersion"],
            Port=data["Port"],
            VpcId=data["VpcId"],
            HealthCheckProtocol=data["HealthCheckProtocol"],
            HealthCheckPort=data["HealthCheckPort"],
            HealthCheckEnabled=data["HealthCheckEnabled"],
            HealthCheckPath=data["HealthCheckPath"],
            HealthCheckIntervalSeconds=data["HealthCheckIntervalSeconds"],
            HealthCheckTimeoutSeconds=data["HealthCheckTimeoutSeconds"],
            HealthyThresholdCount=data["HealthyThresholdCount"],
            UnhealthyThresholdCount=data["UnhealthyThresholdCount"],
            Matcher=data["Matcher"],
            TargetType=data["TargetType"],
            Tags=data["Tags"],
            IpAddressType=data["IpAddressType"],
        )
        response = CreateTargetGroupOutput.model_construct(**_response)
        return cast("TargetGroup", response.TargetGroups[0])

    def update(self, model: "TargetGroup") -> "TargetGroup":
        """
        Modifies the health checks used when evaluating the health state of the
        targets in the specified target group.

        Args:
            model: The :py:class:``TargetGroup`` to update.
        """
        data = model.model_dump()
        _response = self.client.modify_target_group(
            TargetGroupArn=data["TargetGroupArn"],
            HealthCheckProtocol=data["HealthCheckProtocol"],
            HealthCheckPort=data["HealthCheckPort"],
            HealthCheckPath=data["HealthCheckPath"],
            HealthCheckEnabled=data["HealthCheckEnabled"],
            HealthCheckIntervalSeconds=data["HealthCheckIntervalSeconds"],
            HealthCheckTimeoutSeconds=data["HealthCheckTimeoutSeconds"],
            HealthyThresholdCount=data["HealthyThresholdCount"],
            UnhealthyThresholdCount=data["UnhealthyThresholdCount"],
            Matcher=data["Matcher"],
        )
        response = ModifyTargetGroupOutput.model_construct(**_response)
        return cast("TargetGroup", response.TargetGroups[0])

    def delete(self, TargetGroupArn: str) -> None:
        """
        Deletes the specified target group.

        Args:
            TargetGroupArn: The Amazon Resource Name (ARN) of the target group.
        """
        self.client.delete_target_group(TargetGroupArn=self.serialize(TargetGroupArn))

    def get(
        self,
        TargetGroupArns: List["str"],
        *,
        Names: Optional[List["str"]] = None,
        Marker: Optional[str] = None,
        PageSize: Optional[int] = None
    ) -> Optional["TargetGroup"]:
        """
                Describes the specified target groups or all of your target groups. By default,
        all target groups are described. Alternatively, you can specify one of the
        following to filter the results: the ARN of the load balancer, the names of one
        or more target groups, or the ARNs of one or more target groups.

                Args:
                    TargetGroupArns: The Amazon Resource Names (ARN) of the target groups.

                Keyword Args:
                    Names: The names of the target groups.
                    Marker: The marker for the next set of results. (You received this marker
                        from a previous call.)
                    PageSize: The maximum number of results to return with this call.

        """
        _response = self.client.describe_target_groups(
            TargetGroupArns=self.serialize(TargetGroupArns),
            Names=self.serialize(Names),
            Marker=self.serialize(Marker),
            PageSize=self.serialize(PageSize),
        )
        response = DescribeTargetGroupsOutput.model_construct(**_response)

        if response.TargetGroups[0]:
            return response.TargetGroups[0]
        return None

    def list(
        self,
        *,
        LoadBalancerArn: Optional[str] = None,
        TargetGroupArns: Optional[List["str"]] = None,
        Names: Optional[List["str"]] = None,
        Marker: Optional[str] = None,
        PageSize: Optional[int] = None
    ) -> List["TargetGroup"]:
        """
                Describes the specified target groups or all of your target groups. By default,
        all target groups are described. Alternatively, you can specify one of the
        following to filter the results: the ARN of the load balancer, the names of one
        or more target groups, or the ARNs of one or more target groups.

                Keyword Args:
                    LoadBalancerArn: The Amazon Resource Name (ARN) of the load balancer.
                    TargetGroupArns: The Amazon Resource Names (ARN) of the target groups.
                    Names: The names of the target groups.
                    Marker: The marker for the next set of results. (You received this marker
                        from a previous call.)
                    PageSize: The maximum number of results to return with this call.

        """
        paginator = self.client.get_paginator("describe_target_groups")
        response_iterator = paginator.paginate(
            LoadBalancerArn=self.serialize(LoadBalancerArn),
            TargetGroupArns=self.serialize(TargetGroupArns),
            Names=self.serialize(Names),
            Marker=self.serialize(Marker),
            PageSize=self.serialize(PageSize),
        )
        results: List["TargetGroup"] = []
        for _response in response_iterator:
            response = DescribeTargetGroupsOutput(**_response)
            if response.TargetGroups:
                results.extend(response.TargetGroups)
            else:
                break
        return results


# ==============
# Service Models
# ==============


class LoadBalancerState(Boto3Model):
    """
    The state of the load balancer.
    """

    #: The state code. The initial state of the load balancer is ``provisioning``.
    #: After the load balancer is fully set up and ready to route traffic, its state
    #: is ``active``. If load balancer is routing traffic but does not have the
    #: resources it needs to scale, its state is``active_impaired``. If the load
    #: balancer could not be set up, its state is ``failed``.
    Code: Optional[
        Literal["active", "provisioning", "active_impaired", "failed"]
    ] = None
    #: A description of the state.
    Reason: Optional[str] = None


class LoadBalancerAddress(Boto3Model):
    """
    Information about a static IP address for a load balancer.
    """

    #: The static IP address.
    IpAddress: Optional[str] = None
    #: [Network Load Balancers] The allocation ID of the Elastic IP address for an
    #: internal-facing load balancer.
    AllocationId: Optional[str] = None
    #: [Network Load Balancers] The private IPv4 address for an internal load
    #: balancer.
    PrivateIPv4Address: Optional[str] = None
    #: [Network Load Balancers] The IPv6 address.
    IPv6Address: Optional[str] = None


class AvailabilityZone(Boto3Model):
    """
    Information about an Availability Zone.
    """

    #: The name of the Availability Zone.
    ZoneName: Optional[str] = None
    #: The ID of the subnet. You can specify one subnet per Availability Zone.
    SubnetId: Optional[str] = None
    #: [Application Load Balancers on Outposts] The ID of the Outpost.
    OutpostId: Optional[str] = None
    #: [Network Load Balancers] If you need static IP addresses for your load
    #: balancer, you can specify one Elastic IP address per Availability Zone when you
    #: create an internal-facing load balancer. For internal load balancers, you can
    #: specify a private IP address from the IPv4 range of the subnet.
    LoadBalancerAddresses: Optional[List[LoadBalancerAddress]] = None


class LoadBalancer(PrimaryBoto3Model):
    """
    Information about a load balancer.
    """

    manager: Boto3ModelManager = LoadBalancerManager()

    #: The Amazon Resource Name (ARN) of the load balancer.
    LoadBalancerArn: Optional[str] = Field(frozen=True, default=None)
    #: The public DNS name of the load balancer.
    DNSName: Optional[str] = Field(frozen=True, default=None)
    #: The ID of the Amazon Route 53 hosted zone associated with the load balancer.
    CanonicalHostedZoneId: Optional[str] = Field(frozen=True, default=None)
    #: The date and time the load balancer was created.
    CreatedTime: Optional[datetime] = Field(frozen=True, default=None)
    #: The name of the load balancer.
    LoadBalancerName: str
    #: The nodes of an Internet-facing load balancer have public IP addresses. The DNS
    #: name of an Internet-facing load balancer is publicly resolvable to the public
    #: IP addresses of the nodes. Therefore, Internet-facing load balancers can route
    #: requests from clients over the internet.
    Scheme: Literal["internet-facing", "internal"]
    #: The ID of the VPC for the load balancer.
    VpcId: Optional[str] = Field(frozen=True, default=None)
    #: The state of the load balancer.
    State: Optional[LoadBalancerState] = Field(frozen=True, default=None)
    #: The type of load balancer.
    Type: Literal["application", "network", "gateway"]
    #: The subnets for the load balancer.
    AvailabilityZones: Optional[List[AvailabilityZone]] = Field(
        frozen=True, default=None
    )
    #: The IDs of the security groups for the load balancer.
    SecurityGroups: Optional[List[str]] = None
    #: The type of IP addresses used by the subnets for your load balancer. The
    #: possible values are ``ipv4`` (for IPv4 addresses) and ``dualstack`` (for IPv4
    #: and IPv6 addresses).
    IpAddressType: Literal["ipv4", "dualstack"]
    #: [Application Load Balancers on Outposts] The ID of the customer-owned address
    #: pool.
    CustomerOwnedIpv4Pool: Optional[str] = None
    #: Indicates whether to evaluate inbound security group rules for traffic sent to
    #: a Network Load Balancer through Amazon Web Services PrivateLink.
    EnforceSecurityGroupInboundRulesOnPrivateLinkTraffic: Optional[bool] = Field(
        frozen=True, default=None
    )

    @property
    def pk(self) -> Optional[str]:
        """
        Return the primary key of the model.   This is the value of the
        :py:attr:`LoadBalancerArn` attribute.

        Returns:
            The primary key of the model instance.
        """
        return self.LoadBalancerArn

    @property
    def arn(self) -> Optional[str]:
        """
        Return the ARN of the model.   This is the value of the
        :py:attr:`LoadBalancerArn` attribute.

        Returns:
            The ARN of the model instance.
        """
        return self.LoadBalancerArn

    @property
    def name(self) -> Optional[str]:
        """
        Return the name of the model.   This is the value of the
        :py:attr:`LoadBalancerName` attribute.

        Returns:
            The name of the model instance.
        """
        return self.LoadBalancerName


class Certificate(ReadonlyBoto3Model):
    """
    Information about an SSL server certificate.
    """

    #: The Amazon Resource Name (ARN) of the certificate.
    CertificateArn: Optional[str] = None
    #: Indicates whether the certificate is the default certificate. Do not set this
    #: value when specifying a certificate as an input. This value is not included in
    #: the output when describing a listener, but is included when describing listener
    #: certificates.
    IsDefault: Optional[bool] = None


class AuthenticateOidcActionConfig(Boto3Model):
    """
    [HTTPS listeners] Information about an identity provider that is compliant
    with OpenID Connect (OIDC).

    Specify only when ``Type`` is ``authenticate-oidc``.
    """

    #: The OIDC issuer identifier of the IdP. This must be a full URL, including the
    #: HTTPS protocol, the domain, and the path.
    Issuer: str
    #: The authorization endpoint of the IdP. This must be a full URL, including the
    #: HTTPS protocol, the domain, and the path.
    AuthorizationEndpoint: str
    #: The token endpoint of the IdP. This must be a full URL, including the HTTPS
    #: protocol, the domain, and the path.
    TokenEndpoint: str
    #: The user info endpoint of the IdP. This must be a full URL, including the HTTPS
    #: protocol, the domain, and the path.
    UserInfoEndpoint: str
    #: The OAuth 2.0 client identifier.
    ClientId: str
    #: The OAuth 2.0 client secret. This parameter is required if you are creating a
    #: rule. If you are modifying a rule, you can omit this parameter if you set
    #: ``UseExistingClientSecret`` to true.
    ClientSecret: Optional[str] = None
    #: The name of the cookie used to maintain session information. The default is
    #: AWSELBAuthSessionCookie.
    SessionCookieName: Optional[str] = None
    #: The set of user claims to be requested from the IdP. The default is ``openid``.
    Scope: Optional[str] = None
    #: The maximum duration of the authentication session, in seconds. The default is
    #: 604800 seconds (7 days).
    SessionTimeout: Optional[int] = None
    #: The query parameters (up to 10) to include in the redirect request to the
    #: authorization endpoint.
    AuthenticationRequestExtraParams: Optional[Dict[str, str]] = None
    #: The behavior if the user is not authenticated. The following are possible
    #: values:
    OnUnauthenticatedRequest: Optional[Literal["deny", "allow", "authenticate"]] = None
    #: Indicates whether to use the existing client secret when modifying a rule. If
    #: you are creating a rule, you can omit this parameter or set it to false.
    UseExistingClientSecret: Optional[bool] = None


class AuthenticateCognitoActionConfig(Boto3Model):
    """
    [HTTPS listeners] Information for using Amazon Cognito to authenticate
    users.

    Specify only when ``Type`` is ``authenticate-cognito``.
    """

    #: The Amazon Resource Name (ARN) of the Amazon Cognito user pool.
    UserPoolArn: str
    #: The ID of the Amazon Cognito user pool client.
    UserPoolClientId: str
    #: The domain prefix or fully-qualified domain name of the Amazon Cognito user
    #: pool.
    UserPoolDomain: str
    #: The name of the cookie used to maintain session information. The default is
    #: AWSELBAuthSessionCookie.
    SessionCookieName: Optional[str] = None
    #: The set of user claims to be requested from the IdP. The default is ``openid``.
    Scope: Optional[str] = None
    #: The maximum duration of the authentication session, in seconds. The default is
    #: 604800 seconds (7 days).
    SessionTimeout: Optional[int] = None
    #: The query parameters (up to 10) to include in the redirect request to the
    #: authorization endpoint.
    AuthenticationRequestExtraParams: Optional[Dict[str, str]] = None
    #: The behavior if the user is not authenticated. The following are possible
    #: values:
    OnUnauthenticatedRequest: Optional[Literal["deny", "allow", "authenticate"]] = None


class RedirectActionConfig(Boto3Model):
    """
    [Application Load Balancer] Information for creating a redirect action.

    Specify
    only when ``Type`` is ``redirect``.
    """

    #: The protocol. You can specify HTTP, HTTPS, or #{protocol}. You can redirect
    #: HTTP to HTTP, HTTP to HTTPS, and HTTPS to HTTPS. You cannot redirect HTTPS to
    #: HTTP.
    Protocol: Optional[str] = None
    #: The port. You can specify a value from 1 to 65535 or #{port}.
    Port: Optional[str] = None
    #: The hostname. This component is not percent-encoded. The hostname can contain
    #: #{host}.
    Host: Optional[str] = None
    #: The absolute path, starting with the leading "/". This component is not
    #: percent-encoded. The path can contain #{host}, #{path}, and #{port}.
    Path: Optional[str] = None
    #: The query parameters, URL-encoded when necessary, but not percent-encoded. Do
    #: not include the leading "?", as it is automatically added. You can specify any
    #: of the reserved keywords.
    Query: Optional[str] = None
    #: The HTTP redirect code. The redirect is either permanent (HTTP 301) or
    #: temporary (HTTP 302).
    StatusCode: Literal["HTTP_301", "HTTP_302"]


class FixedResponseActionConfig(Boto3Model):
    """
    [Application Load Balancer] Information for creating an action that returns
    a custom HTTP response.

    Specify only when ``Type`` is ``fixed-response``.
    """

    #: The message.
    MessageBody: Optional[str] = None
    #: The HTTP response code (2XX, 4XX, or 5XX).
    StatusCode: str
    #: The content type.
    ContentType: Optional[str] = None


class TargetGroupTuple(Boto3Model):
    """
    Information about how traffic will be distributed between multiple target
    groups in a forward rule.
    """

    #: The Amazon Resource Name (ARN) of the target group.
    TargetGroupArn: Optional[str] = None
    #: The weight. The range is 0 to 999.
    Weight: Optional[int] = None


class TargetGroupStickinessConfig(Boto3Model):
    """
    The target group stickiness for the rule.
    """

    #: Indicates whether target group stickiness is enabled.
    Enabled: Optional[bool] = None
    #: The time period, in seconds, during which requests from a client should be
    #: routed to the same target group. The range is 1-604800 seconds (7 days).
    DurationSeconds: Optional[int] = None


class ForwardActionConfig(Boto3Model):
    """
    Information for creating an action that distributes requests among one or
    more target groups.

    For Network Load Balancers, you can specify a single target
    group. Specify only when ``Type`` is ``forward``. If you specify both
    ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group
    using ``ForwardConfig`` and it must be the same target group specified in
    ``TargetGroupArn``.
    """

    #: The target groups. For Network Load Balancers, you can specify a single target
    #: group.
    TargetGroups: Optional[List[TargetGroupTuple]] = None
    #: The target group stickiness for the rule.
    TargetGroupStickinessConfig: Optional[TargetGroupStickinessConfig] = None


class Action(Boto3Model):
    """
    Information about an action.

    Each rule must include exactly one of the following types of actions:
    ``forward``, ``fixed-response``, or ``redirect``, and it must be the last
    action to be performed.
    """

    #: The type of action.
    Type: Literal[
        "forward",
        "authenticate-oidc",
        "authenticate-cognito",
        "redirect",
        "fixed-response",
    ]
    #: The Amazon Resource Name (ARN) of the target group. Specify only when ``Type``
    #: is ``forward`` and you want to route to a single target group. To route to one
    #: or more target groups, use ``ForwardConfig`` instead.
    TargetGroupArn: Optional[str] = None
    #: [HTTPS listeners] Information about an identity provider that is compliant with
    #: OpenID Connect (OIDC). Specify only when ``Type`` is ``authenticate-oidc``.
    AuthenticateOidcConfig: Optional[AuthenticateOidcActionConfig] = None
    #: [HTTPS listeners] Information for using Amazon Cognito to authenticate users.
    #: Specify only when ``Type`` is ``authenticate-cognito``.
    AuthenticateCognitoConfig: Optional[AuthenticateCognitoActionConfig] = None
    #: The order for the action. This value is required for rules with multiple
    #: actions. The action with the lowest value for order is performed first.
    Order: Optional[int] = None
    #: [Application Load Balancer] Information for creating a redirect action. Specify
    #: only when ``Type`` is ``redirect``.
    RedirectConfig: Optional[RedirectActionConfig] = None
    #: [Application Load Balancer] Information for creating an action that returns a
    #: custom HTTP response. Specify only when ``Type`` is ``fixed-response``.
    FixedResponseConfig: Optional[FixedResponseActionConfig] = None
    #: Information for creating an action that distributes requests among one or more
    #: target groups. For Network Load Balancers, you can specify a single target
    #: group. Specify only when ``Type`` is ``forward``. If you specify both
    #: ``ForwardConfig`` and ``TargetGroupArn``, you can specify only one target group
    #: using ``ForwardConfig`` and it must be the same target group specified in
    #: ``TargetGroupArn``.
    ForwardConfig: Optional[ForwardActionConfig] = None


class Listener(PrimaryBoto3Model):
    """
    Information about a listener.
    """

    manager: Boto3ModelManager = ListenerManager()

    #: The Amazon Resource Name (ARN) of the listener.
    ListenerArn: Optional[str] = Field(frozen=True, default=None)
    #: The Amazon Resource Name (ARN) of the load balancer.
    LoadBalancerArn: str
    #: The port on which the load balancer is listening.
    Port: int
    #: The protocol for connections from clients to the load balancer.
    Protocol: Literal["HTTP", "HTTPS", "TCP", "TLS", "UDP", "TCP_UDP", "GENEVE"]
    #: [HTTPS or TLS listener] The default certificate for the listener.
    Certificates: Optional[List[Certificate]] = None
    #: [HTTPS or TLS listener] The security policy that defines which protocols and
    #: ciphers are supported.
    SslPolicy: Optional[str] = None
    #: The default actions for the listener.
    DefaultActions: Optional[List[Action]] = None
    #: [TLS listener] The name of the Application-Layer Protocol Negotiation (ALPN)
    #: policy.
    AlpnPolicy: Optional[List[str]] = None

    @property
    def pk(self) -> Optional[str]:
        """
        Return the primary key of the model.   This is the value of the
        :py:attr:`ListenerArn` attribute.

        Returns:
            The primary key of the model instance.
        """
        return self.ListenerArn

    @property
    def arn(self) -> Optional[str]:
        """
        Return the ARN of the model.   This is the value of the
        :py:attr:`ListenerArn` attribute.

        Returns:
            The ARN of the model instance.
        """
        return self.ListenerArn


class HostHeaderConditionConfig(Boto3Model):
    """
    Information for a host header condition.

    Specify only when ``Field`` is ``host-
    header``.
    """

    #: The host names. The maximum size of each name is 128 characters. The comparison
    #: is case insensitive. The following wildcard characters are supported: \*
    #: (matches 0 or more characters) and ? (matches exactly 1 character).
    Values: Optional[List[str]] = None


class PathPatternConditionConfig(Boto3Model):
    """
    Information for a path pattern condition.

    Specify only when ``Field`` is
    ``path-pattern``.
    """

    #: The path patterns to compare against the request URL. The maximum size of each
    #: string is 128 characters. The comparison is case sensitive. The following
    #: wildcard characters are supported: \* (matches 0 or more characters) and ?
    #: (matches exactly 1 character).
    Values: Optional[List[str]] = None


class HttpHeaderConditionConfig(Boto3Model):
    """
    Information for an HTTP header condition.

    Specify only when ``Field`` is
    ``http-header``.
    """

    #: The name of the HTTP header field. The maximum size is 40 characters. The
    #: header name is case insensitive. The allowed characters are specified by RFC
    #: 7230. Wildcards are not supported.
    HttpHeaderName: Optional[str] = None
    #: The strings to compare against the value of the HTTP header. The maximum size
    #: of each string is 128 characters. The comparison strings are case insensitive.
    #: The following wildcard characters are supported: \* (matches 0 or more
    #: characters) and ? (matches exactly 1 character).
    Values: Optional[List[str]] = None


class QueryStringKeyValuePair(Boto3Model):
    """
    Information about a key/value pair.
    """

    #: The key. You can omit the key.
    Key: Optional[str] = None
    #: The value.
    Value: Optional[str] = None


class QueryStringConditionConfig(Boto3Model):
    """
    Information for a query string condition.

    Specify only when ``Field`` is
    ``query-string``.
    """

    #: The key/value pairs or values to find in the query string. The maximum size of
    #: each string is 128 characters. The comparison is case insensitive. The
    #: following wildcard characters are supported: \* (matches 0 or more characters)
    #: and ? (matches exactly 1 character). To search for a literal '\*' or '?'
    #: character in a query string, you must escape these characters in ``Values``
    #: using a '\' character.
    Values: Optional[List[QueryStringKeyValuePair]] = None


class HttpRequestMethodConditionConfig(Boto3Model):
    """
    Information for an HTTP method condition.

    Specify only when ``Field`` is
    ``http-request-method``.
    """

    #: The name of the request method. The maximum size is 40 characters. The allowed
    #: characters are A-Z, hyphen (-), and underscore (\_). The comparison is case
    #: sensitive. Wildcards are not supported; therefore, the method name must be an
    #: exact match.
    Values: Optional[List[str]] = None


class SourceIpConditionConfig(Boto3Model):
    """
    Information for a source IP condition.

    Specify only when ``Field`` is ``source-
    ip``.
    """

    #: The source IP addresses, in CIDR format. You can use both IPv4 and IPv6
    #: addresses. Wildcards are not supported.
    Values: Optional[List[str]] = None


class RuleCondition(Boto3Model):
    """
    Information about a condition for a rule.

    Each rule can optionally include up to one of each of the following conditions:
    ``http-request-method``, ``host-header``, ``path-pattern``, and ``source-ip``.
    Each rule can also optionally include one or more of each of the following
    conditions: ``http-header`` and ``query-string``. Note that the value for a
    condition cannot be empty.
    """

    #: The field in the HTTP request. The following are the possible values:
    Field: Optional[str] = None
    #: The condition value. Specify only when ``Field`` is ``host-header`` or ``path-
    #: pattern``. Alternatively, to specify multiple host names or multiple path
    #: patterns, use ``HostHeaderConfig`` or ``PathPatternConfig``.
    Values: Optional[List[str]] = None
    #: Information for a host header condition. Specify only when ``Field`` is ``host-
    #: header``.
    HostHeaderConfig: Optional[HostHeaderConditionConfig] = None
    #: Information for a path pattern condition. Specify only when ``Field`` is
    #: ``path-pattern``.
    PathPatternConfig: Optional[PathPatternConditionConfig] = None
    #: Information for an HTTP header condition. Specify only when ``Field`` is
    #: ``http-header``.
    HttpHeaderConfig: Optional[HttpHeaderConditionConfig] = None
    #: Information for a query string condition. Specify only when ``Field`` is
    #: ``query-string``.
    QueryStringConfig: Optional[QueryStringConditionConfig] = None
    #: Information for an HTTP method condition. Specify only when ``Field`` is
    #: ``http-request-method``.
    HttpRequestMethodConfig: Optional[HttpRequestMethodConditionConfig] = None
    #: Information for a source IP condition. Specify only when ``Field`` is ``source-
    #: ip``.
    SourceIpConfig: Optional[SourceIpConditionConfig] = None


class Rule(PrimaryBoto3Model):
    """
    Information about a rule.
    """

    manager: Boto3ModelManager = RuleManager()

    #: The Amazon Resource Name (ARN) of the rule.
    RuleArn: Optional[str] = None
    #: The priority.
    Priority: str
    #: The conditions. Each rule can include zero or one of the following conditions:
    #: ``http-request-method``, ``host-header``, ``path-pattern``, and ``source-ip``,
    #: and zero or more of the following conditions: ``http-header`` and ``query-
    #: string``.
    Conditions: List[RuleCondition]
    #: The actions. Each rule must include exactly one of the following types of
    #: actions: ``forward``, ``redirect``, or ``fixed-response``, and it must be the
    #: last action to be performed.
    Actions: List[Action]
    #: Indicates whether this is the default rule.
    IsDefault: bool

    @property
    def pk(self) -> Optional[str]:
        """
        Return the primary key of the model.   This is the value of the
        :py:attr:`RuleArn` attribute.

        Returns:
            The primary key of the model instance.
        """
        return self.RuleArn

    @property
    def arn(self) -> Optional[str]:
        """
        Return the ARN of the model.   This is the value of the
        :py:attr:`RuleArn` attribute.

        Returns:
            The ARN of the model instance.
        """
        return self.RuleArn


class Matcher(Boto3Model):
    """
    The HTTP or gRPC codes to use when checking for a successful response from
    a target.
    """

    #: For Application Load Balancers, you can specify values between 200 and 499,
    #: with the default value being 200. You can specify multiple values (for example,
    #: "200,202") or a range of values (for example, "200-299").
    HttpCode: Optional[str] = None
    #: You can specify values between 0 and 99. You can specify multiple values (for
    #: example, "0,1") or a range of values (for example, "0-5"). The default value is
    #: 12.
    GrpcCode: Optional[str] = None


class TargetGroup(PrimaryBoto3Model):
    """
    Information about a target group.
    """

    manager: Boto3ModelManager = TargetGroupManager()

    #: The Amazon Resource Name (ARN) of the target group.
    TargetGroupArn: Optional[str] = Field(frozen=True, default=None)
    #: The name of the target group.
    TargetGroupName: str
    #: The protocol to use for routing traffic to the targets.
    Protocol: Literal["HTTP", "HTTPS", "TCP", "TLS", "UDP", "TCP_UDP", "GENEVE"]
    #: The port on which the targets are listening. Not used if the target is a Lambda
    #: function.
    Port: int
    #: The ID of the VPC for the targets.
    VpcId: str
    #: The protocol to use to connect with the target. The GENEVE, TLS, UDP, and
    #: TCP\_UDP protocols are not supported for health checks.
    HealthCheckProtocol: Optional[
        Literal["HTTP", "HTTPS", "TCP", "TLS", "UDP", "TCP_UDP", "GENEVE"]
    ] = None
    #: The port to use to connect with the target.
    HealthCheckPort: Optional[str] = None
    #: Indicates whether health checks are enabled.
    HealthCheckEnabled: Optional[bool] = None
    #: The approximate amount of time, in seconds, between health checks of an
    #: individual target.
    HealthCheckIntervalSeconds: Optional[int] = None
    #: The amount of time, in seconds, during which no response means a failed health
    #: check.
    HealthCheckTimeoutSeconds: Optional[int] = None
    #: The number of consecutive health checks successes required before considering
    #: an unhealthy target healthy.
    HealthyThresholdCount: Optional[int] = None
    #: The number of consecutive health check failures required before considering the
    #: target unhealthy.
    UnhealthyThresholdCount: Optional[int] = None
    #: The destination for health checks on the targets.
    HealthCheckPath: Optional[str] = None
    #: The HTTP or gRPC codes to use when checking for a successful response from a
    #: target.
    Matcher: Optional[Matcher] = None
    #: The Amazon Resource Names (ARN) of the load balancers that route traffic to
    #: this target group.
    LoadBalancerArns: Optional[List[str]] = None
    #: The type of target that you must specify when registering targets with this
    #: target group. The possible values are ``instance`` (register targets by
    #: instance ID), ``ip`` (register targets by IP address), ``lambda`` (register a
    #: single Lambda function as a target), or ``alb`` (register a single Application
    #: Load Balancer as a target).
    TargetType: Literal["instance", "ip", "lambda", "alb"]
    #: [HTTP/HTTPS protocol] The protocol version. The possible values are ``GRPC``,
    #: ``HTTP1``, and ``HTTP2``.
    ProtocolVersion: Optional[str] = None
    #: The type of IP address used for this target group. The possible values are
    #: ``ipv4`` and ``ipv6``. This is an optional parameter. If not specified, the IP
    #: address type defaults to ``ipv4``.
    IpAddressType: Literal["ipv4", "ipv6"]

    @property
    def pk(self) -> Optional[str]:
        """
        Return the primary key of the model.   This is the value of the
        :py:attr:`TargetGroupArn` attribute.

        Returns:
            The primary key of the model instance.
        """
        return self.TargetGroupArn

    @property
    def arn(self) -> Optional[str]:
        """
        Return the ARN of the model.   This is the value of the
        :py:attr:`TargetGroupArn` attribute.

        Returns:
            The ARN of the model instance.
        """
        return self.TargetGroupArn

    @property
    def name(self) -> Optional[str]:
        """
        Return the name of the model.   This is the value of the
        :py:attr:`TargetGroupName` attribute.

        Returns:
            The name of the model instance.
        """
        return self.TargetGroupName


class SubnetMapping(Boto3Model):
    """
    Information about a subnet mapping.
    """

    #: The ID of the subnet.
    SubnetId: str
    #: [Network Load Balancers] The allocation ID of the Elastic IP address for an
    #: internet-facing load balancer.
    AllocationId: Optional[str] = None
    #: [Network Load Balancers] The private IPv4 address for an internal load
    #: balancer.
    PrivateIPv4Address: Optional[str] = None
    #: [Network Load Balancers] The IPv6 address.
    IPv6Address: Optional[str] = None


# =======================
# Request/Response Models
# =======================


class CreateLoadBalancerOutput(Boto3Model):
    #: Information about the load balancer.
    LoadBalancers: Optional[List[LoadBalancer]] = None


class DeleteLoadBalancerOutput(Boto3Model):
    pass


class DescribeLoadBalancersOutput(Boto3Model):
    #: Information about the load balancers.
    LoadBalancers: Optional[List[LoadBalancer]] = None
    #: If there are additional results, this is the marker for the next set of
    #: results. Otherwise, this is null.
    NextMarker: Optional[str] = None


class CreateListenerOutput(Boto3Model):
    #: Information about the listener.
    Listeners: Optional[List[Listener]] = None


class ModifyListenerOutput(Boto3Model):
    #: Information about the modified listener.
    Listeners: Optional[List[Listener]] = None


class DeleteListenerOutput(Boto3Model):
    pass


class DescribeListenersOutput(Boto3Model):
    #: Information about the listeners.
    Listeners: Optional[List[Listener]] = None
    #: If there are additional results, this is the marker for the next set of
    #: results. Otherwise, this is null.
    NextMarker: Optional[str] = None


class CreateRuleOutput(Boto3Model):
    #: Information about the rule.
    Rules: Optional[List[Rule]] = None


class ModifyRuleOutput(Boto3Model):
    #: Information about the modified rule.
    Rules: Optional[List[Rule]] = None


class DeleteRuleOutput(Boto3Model):
    pass


class DescribeRulesOutput(Boto3Model):
    #: Information about the rules.
    Rules: Optional[List[Rule]] = None
    #: If there are additional results, this is the marker for the next set of
    #: results. Otherwise, this is null.
    NextMarker: Optional[str] = None


class CreateTargetGroupOutput(Boto3Model):
    #: Information about the target group.
    TargetGroups: Optional[List[TargetGroup]] = None


class ModifyTargetGroupOutput(Boto3Model):
    #: Information about the modified target group.
    TargetGroups: Optional[List[TargetGroup]] = None


class DeleteTargetGroupOutput(Boto3Model):
    pass


class DescribeTargetGroupsOutput(Boto3Model):
    #: Information about the target groups.
    TargetGroups: Optional[List[TargetGroup]] = None
    #: If there are additional results, this is the marker for the next set of
    #: results. Otherwise, this is null.
    NextMarker: Optional[str] = None
